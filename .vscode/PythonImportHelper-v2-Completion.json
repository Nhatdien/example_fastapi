[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "models,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.",
        "description": "models.",
        "detail": "models.",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "oauth2",
        "description": "oauth2",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "routers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routers",
        "description": "routers",
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "vote",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "database,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.",
        "description": "database.",
        "detail": "database.",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('content', sa.String, nullable=False))\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "revision = '53c90de31c55'\ndown_revision = 'ebc09c652b98'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('content', sa.String, nullable=False))\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "down_revision = 'ebc09c652b98'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('content', sa.String, nullable=False))\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('content', sa.String, nullable=False))\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.53c90de31c55_add_content_column",
        "description": "app.alembic.versions.53c90de31c55_add_content_column",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('content', sa.String, nullable=False))\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "app.alembic.versions.53c90de31c55_add_content_column",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table('users',\n                    sa.Column('id', sa.Integer, nullable=False),\n                    sa.Column('email', sa.String, nullable=False),\n                    sa.Column('password', sa.String, nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),\n                    sa.UniqueConstraint('email')\n                    )",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('users')",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "revision = '645345c1548e'\ndown_revision = '53c90de31c55'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('users',\n                    sa.Column('id', sa.Integer, nullable=False),\n                    sa.Column('email', sa.String, nullable=False),\n                    sa.Column('password', sa.String, nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "down_revision = '53c90de31c55'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('users',\n                    sa.Column('id', sa.Integer, nullable=False),\n                    sa.Column('email', sa.String, nullable=False),\n                    sa.Column('password', sa.String, nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('users',\n                    sa.Column('id', sa.Integer, nullable=False),\n                    sa.Column('email', sa.String, nullable=False),\n                    sa.Column('password', sa.String, nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.645345c1548e_add_user_table",
        "description": "app.alembic.versions.645345c1548e_add_user_table",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.create_table('users',\n                    sa.Column('id', sa.Integer, nullable=False),\n                    sa.Column('email', sa.String, nullable=False),\n                    sa.Column('password', sa.String, nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),\n                    sa.UniqueConstraint('email')",
        "detail": "app.alembic.versions.645345c1548e_add_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    op.add_column('posts', sa.Column('published', sa.Boolean(), server_default='TRUE', nullable=False))",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_users_id'), table_name='users')\n    op.add_column('posts', sa.Column('publisted', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))\n    op.drop_index(op.f('ix_posts_id'), table_name='posts')\n    op.drop_column('posts', 'published')\n    op.drop_table('votes')\n    # ### end Alembic commands ###",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "revision = '7eec938f92c2'\ndown_revision = 'ba8ff1d63fd6'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], onupdate='NO ACTION', ondelete='CASCADE'),",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "down_revision = 'ba8ff1d63fd6'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='NO ACTION', ondelete='CASCADE'),",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "description": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='NO ACTION', ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )",
        "detail": "app.alembic.versions.7eec938f92c2_add_vote_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts',sa.Column('owner_id', sa.Integer,\n                                     sa.ForeignKey(\"users.id\", ondelete=\"CASCADE\",\n                                                    onupdate=\"NO ACTION\"), nullable=False)\n                  )  \ndef downgrade() -> None:\n    op.drop_constraint(\"posts_owner_id_fkey\", table_name=\"posts\")\n    op.drop_column(\"post\", \"owner_id\")",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_constraint(\"posts_owner_id_fkey\", table_name=\"posts\")\n    op.drop_column(\"post\", \"owner_id\")",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "revision = 'a5aeabb39ad5'\ndown_revision = '645345c1548e'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column('posts',sa.Column('owner_id', sa.Integer,\n                                     sa.ForeignKey(\"users.id\", ondelete=\"CASCADE\",\n                                                    onupdate=\"NO ACTION\"), nullable=False)\n                  )  \ndef downgrade() -> None:",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "down_revision = '645345c1548e'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column('posts',sa.Column('owner_id', sa.Integer,\n                                     sa.ForeignKey(\"users.id\", ondelete=\"CASCADE\",\n                                                    onupdate=\"NO ACTION\"), nullable=False)\n                  )  \ndef downgrade() -> None:\n    op.drop_constraint(\"posts_owner_id_fkey\", table_name=\"posts\")",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column('posts',sa.Column('owner_id', sa.Integer,\n                                     sa.ForeignKey(\"users.id\", ondelete=\"CASCADE\",\n                                                    onupdate=\"NO ACTION\"), nullable=False)\n                  )  \ndef downgrade() -> None:\n    op.drop_constraint(\"posts_owner_id_fkey\", table_name=\"posts\")\n    op.drop_column(\"post\", \"owner_id\")",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "description": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.add_column('posts',sa.Column('owner_id', sa.Integer,\n                                     sa.ForeignKey(\"users.id\", ondelete=\"CASCADE\",\n                                                    onupdate=\"NO ACTION\"), nullable=False)\n                  )  \ndef downgrade() -> None:\n    op.drop_constraint(\"posts_owner_id_fkey\", table_name=\"posts\")\n    op.drop_column(\"post\", \"owner_id\")",
        "detail": "app.alembic.versions.a5aeabb39ad5_add_forign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('title',sa.String, nullable=False))\n    op.add_column('posts', sa.Column('publisted', sa.Boolean, nullable=False,server_default=\"TRUE\"))\n    op.add_column('posts', sa.Column(\"created_at\", sa.TIMESTAMP(timezone=True), nullable=False,\n                                     server_default=sa.text(\"now()\")))\ndef downgrade() -> None:\n    op.drop_column('title', \"posts\")\n    op.drop_column('published', \"posts\")    \n    op.drop_column('create_at', \"posts\")",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('title', \"posts\")\n    op.drop_column('published', \"posts\")    \n    op.drop_column('create_at', \"posts\")",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "revision = 'ba8ff1d63fd6'\ndown_revision = 'a5aeabb39ad5'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('title',sa.String, nullable=False))\n    op.add_column('posts', sa.Column('publisted', sa.Boolean, nullable=False,server_default=\"TRUE\"))\n    op.add_column('posts', sa.Column(\"created_at\", sa.TIMESTAMP(timezone=True), nullable=False,\n                                     server_default=sa.text(\"now()\")))\ndef downgrade() -> None:",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "down_revision = 'a5aeabb39ad5'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('title',sa.String, nullable=False))\n    op.add_column('posts', sa.Column('publisted', sa.Boolean, nullable=False,server_default=\"TRUE\"))\n    op.add_column('posts', sa.Column(\"created_at\", sa.TIMESTAMP(timezone=True), nullable=False,\n                                     server_default=sa.text(\"now()\")))\ndef downgrade() -> None:\n    op.drop_column('title', \"posts\")",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('title',sa.String, nullable=False))\n    op.add_column('posts', sa.Column('publisted', sa.Boolean, nullable=False,server_default=\"TRUE\"))\n    op.add_column('posts', sa.Column(\"created_at\", sa.TIMESTAMP(timezone=True), nullable=False,\n                                     server_default=sa.text(\"now()\")))\ndef downgrade() -> None:\n    op.drop_column('title', \"posts\")\n    op.drop_column('published', \"posts\")    ",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "description": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.add_column(\"posts\", sa.Column('title',sa.String, nullable=False))\n    op.add_column('posts', sa.Column('publisted', sa.Boolean, nullable=False,server_default=\"TRUE\"))\n    op.add_column('posts', sa.Column(\"created_at\", sa.TIMESTAMP(timezone=True), nullable=False,\n                                     server_default=sa.text(\"now()\")))\ndef downgrade() -> None:\n    op.drop_column('title', \"posts\")\n    op.drop_column('published', \"posts\")    \n    op.drop_column('create_at', \"posts\")",
        "detail": "app.alembic.versions.ba8ff1d63fd6_add_content_published_and_create_at_col_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table('posts', sa.Column(\"id\", sa.Integer, nullable=False, primary_key=True))\ndef downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "revision = 'ebc09c652b98'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('posts', sa.Column(\"id\", sa.Integer, nullable=False, primary_key=True))\ndef downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('posts', sa.Column(\"id\", sa.Integer, nullable=False, primary_key=True))\ndef downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table('posts', sa.Column(\"id\", sa.Integer, nullable=False, primary_key=True))\ndef downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "app.alembic.versions.ebc09c652b98_create_post_table",
        "description": "app.alembic.versions.ebc09c652b98_create_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.create_table('posts', sa.Column(\"id\", sa.Integer, nullable=False, primary_key=True))\ndef downgrade() -> None:\n    op.drop_table('posts')",
        "detail": "app.alembic.versions.ebc09c652b98_create_post_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "app.alembic.env",
        "description": "app.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "app.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "app.alembic.env",
        "description": "app.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "app.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.alembic.env",
        "description": "app.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f\"postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}\")\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "app.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "app.alembic.env",
        "description": "app.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "app.alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credential: OAuth2PasswordRequestForm = Depends()\n          , db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credential.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"user not exist\")\n    if not utils.verify(user_credential.password, str(user.password)): \n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid credential\")\n    access_token = oauth2.create_access_token(data={\"user_id\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags=[\"Authentication\"])\n@router.post(\"/login\", response_model=schemas.Token)\ndef login(user_credential: OAuth2PasswordRequestForm = Depends()\n          , db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credential.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"user not exist\")\n    if not utils.verify(user_credential.password, str(user.password)): \n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid credential\")",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_post(db: Session = Depends(database.get_db),\n             current_user: models.User = Depends(oauth2.get_current_user),\n             limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cursor.execute(\"\"\"SELECT * from posts WHERE id = %s\"\"\", (id,))\n    # test_post = cursor.fetchone()\n    test_post = db.query(models.Post).filter(\n        models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    result = db.query(models.Post,\n                        func.count(models.Vote.user_id).label(\"votes\")\n                      ).join(models.Vote, models.Vote.post_id == models.Post.id,",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_post(post: schemas.PostCreate,\n                db: Session = Depends(database.get_db),\n                current_user: models.User = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"INSERT INTO posts (title, content, published)\n    # VALUES (%(title)s, %(content)s, %(published)s)\n    # RETURNING *\"\"\",\n    #                {\"title\":new_post.title, \"content\":new_post.content, 'published':new_post.published})\n    # created_post = cursor.fetchall()\n    # conn.commit()\n    created_post = models.Post(owner_id=current_user.id,",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts(id: int, db: Session = Depends(database.get_db),\n              current_user: models.User = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n    # posts = cursor.fetchall()\n    posts = db.query(models.Post).filter(models.Post.id == id).first()\n    return posts\n@router.delete(\"/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_post(id: int, db: Session = Depends(database.get_db),\n                current_user: models.User = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"DELETE FROM posts WHERE id = %s RETURNING *\"\"\", (id,))",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_post(id: int, db: Session = Depends(database.get_db),\n                current_user: models.User = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"DELETE FROM posts WHERE id = %s RETURNING *\"\"\", (id,))\n    # deleted_post = cursor.fetchone()\n    # conn.commit()\n    post = db.query(models.Post).filter(models.Post.id == id)\n    if post.first() == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post witd id {id} doesn't exist\")\n    if post.first().owner_id != current_user.id:  # type: ignore",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_post(id: int, updated_post: schemas.PostCreate,\n                db: Session = Depends(database.get_db),\n                current_user: models.User = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\n    # RETURNING *\"\"\",\n    #                (post.title, post.content, post.published, id))\n    # updated_post = cursor.fetchone()\n    post_update_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_update_query.first()\n    if post == None:",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=[\"Posts\"]\n)\n@router.get(\"/\", response_model=List[schemas.PostOut])\ndef get_post(db: Session = Depends(database.get_db),\n             current_user: models.User = Depends(oauth2.get_current_user),\n             limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cursor.execute(\"\"\"SELECT * from posts WHERE id = %s\"\"\", (id,))\n    # test_post = cursor.fetchone()",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(database.get_db)):\n    #hash the password\n    user.password = utils.hash(user.password)\n    created_user = models.User(**user.dict())\n    db.add(created_user)\n    db.commit()\n    db.refresh(created_user)\n    return created_user\n@router.get(\"/{id}\", response_model=schemas.UserOut)\ndef get_user(id: int, db: Session = Depends(database.get_db)):",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                             detail=f\"User with id:{id} does not exist\")\n    return user",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"Users\"]\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(database.get_db)):\n    #hash the password\n    user.password = utils.hash(user.password)\n    created_user = models.User(**user.dict())\n    db.add(created_user)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def vote(vote: schemas.Vote, db: Session = Depends(database.get_db),\n         current_user: models.User = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                            detail=f\"post id:{vote.post_id}not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, \n                                     models.Vote.user_id == current_user.id)\n    if vote_query.first():\n        vote.dir = 0",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "router = APIRouter(prefix=\"/vote\", tags=[\"Votes\"])\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef vote(vote: schemas.Vote, db: Session = Depends(database.get_db),\n         current_user: models.User = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                            detail=f\"post id:{vote.post_id}not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, \n                                     models.Vote.user_id == current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings() #type: ignore",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f\"postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}\" \nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"HI!\"}\n#Users API",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = [\n    \"*\",\n    \"http://localhost\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\n    \"*\",\n    \"http://localhost\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, index=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default=\"TRUE\", nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True),\n                        nullable=False, server_default=text(\"now()\"))\n    owner_id = Column(Integer,\n                      ForeignKey(\"users.id\", ondelete=\"CASCADE\",",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True),\n                        nullable=False, server_default=text(\"now()\"))\n    id = Column(Integer, primary_key=True, index=True, nullable=False)\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer,",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer,\n                     ForeignKey(\"users.id\", onupdate=\"NO ACTION\",\n                                ondelete=\"CASCADE\"),\n                     primary_key=True,\n                     nullable=False)\n    post_id = Column(Integer,\n                     ForeignKey(\"posts.id\", onupdate=\"NO ACTION\",\n                                ondelete=\"CASCADE\"),",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy() # type: ignore\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credential_exception):\n    try:\n        payload = jwt.decode(token=token, key=SECRET_KEY, algorithms=ALGORITHM)\n        id :str = payload.get(\"user_id\") #type: ignore",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credential_exception):\n    try:\n        payload = jwt.decode(token=token, key=SECRET_KEY, algorithms=ALGORITHM)\n        id :str = payload.get(\"user_id\") #type: ignore\n        if id is None:\n            raise credential_exception\n        token_data = schemas.TokenData(id=id)\n    except JWTError:\n        raise credential_exception\n    return token_data",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(token: schemas.TokenData = Depends(oauth2_schemes),\n                     db: Session = Depends(database.get_db)):\n    credential_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                         detail=\"Couldn't validate credential\",\n                                         headers={\"WWW-Authenticate\":\"Bearer\"})\n    token = verify_access_token(token, credential_exception)  #type: ignore\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_schemes",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oauth2_schemes = OAuth2PasswordBearer(tokenUrl=\"login\")\n#SECRET KEY\nSECRET_KEY = settings.secret_key\n#alogrithm\nALGORITHM = settings.algorithm\n#Expiration time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy() # type: ignore\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\n#alogrithm\nALGORITHM = settings.algorithm\n#Expiration time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy() # type: ignore\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\n#Expiration time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy() # type: ignore\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credential_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy() # type: ignore\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credential_exception):\n    try:\n        payload = jwt.decode(token=token, key=SECRET_KEY, algorithms=ALGORITHM)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id :int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    id :int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):\n    email : EmailStr\n    password: str\nclass PostBase(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email : EmailStr\n    password: str\nclass PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True\nclass PostCreate(PostBase):\n    pass\nclass Post(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True\nclass PostCreate(PostBase):\n    pass\nclass Post(BaseModel):\n    id: int\n    title: str\n    content: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostCreate(PostBase):\n    pass\nclass Post(BaseModel):\n    id: int\n    title: str\n    content: str\n    published: bool = True\n    created_at: datetime\n    owner_id: int\n    owner: UserOut",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(BaseModel):\n    id: int\n    title: str\n    content: str\n    published: bool = True\n    created_at: datetime\n    owner_id: int\n    owner: UserOut\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostOut(BaseModel):\n    Post: Post\n    votes: int\n    class Config:\n        orm_mode = True\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) = 1#type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) = 1#type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) = 1#type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]